# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.provider "libvirt"
  config.vm.box = "generic/debian12"
  config.vm.hostname = "struts-RCE"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.57.25"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Disable the default share of the current code directory. Doing this
  # provides improved isolation between the vagrant box and your host
  # by making sure your Vagrantfile isn't accessible to the vagrant box.
  # If you use this you may want to enable additional shared subfolders as
  # shown above.
  config.vm.synced_folder ".", "/vagrant"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
   config.vm.provision "shell", inline: <<-SHELL
     apt-get update
     apt-get install -y git openjdk-17-jdk

     cd ~/
     mkdir /opt/tomcat
     TOMCAT_TAR=apache-tomcat-9.0.83.tar.gz
     if [ ! -f TOMCAT_TAR ]; then
       wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.83/bin/$TOMCAT_TAR
     fi
     tar -xf $TOMCAT_TAR -C /opt/tomcat --strip-components=1

     # Build the PoC struts app
     # git clone https://github.com/llaltxll/CVE-2023-50164-Apache-Struts-RCE.git
     MVN_TAR=apache-maven-3.9.9-bin.tar.gz
     if [ ! -f $MVN_TAR ]; then 
       wget https://dlcdn.apache.org/maven/maven-3/3.9.9/binaries/$MVN_TAR
     fi
     tar -xf $MVN_TAR
     cp -r /vagrant/struts-app/ .
     cd struts-app/
     ~/apache-maven-3.9.9/bin/mvn clean package

     # Drop the package to deploy as ROOT app on tomcat
     mv /opt/tomcat/webapps/ROOT /opt/tomcat/webapps/old_ROOT
     cp target/upload-1.0.0.war /opt/tomcat/webapps/ROOT.war

     # Create the uploads folder
     mkdir /opt/tomcat/uploads

     # Create user and group for tomcat
     groupadd tomcat
     useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat
     # Give tomcat ownership of it's folder
     chown -R tomcat: /opt/tomcat
     chmod +x /opt/tomcat/bin/*.sh

     # Install tomcat as a systemd service
     cat << EOF > /etc/systemd/system/tomcat.service
[Unit]
Description=Tomcat webs servlet container
After=network.target
[Service]
Type=forking
User=tomcat
Group=tomcat
RestartSec=10
Restart=always
Environment="JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64/"
Environment="JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom"
Environment="CATALINA_BASE=/opt/tomcat"
Environment="CATALINA_HOME=/opt/tomcat"
Environment="CATALINA_PID=/opt/tomcat/temp/tomcat.pid"
Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"
ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh
[Install]
WantedBy=multi-user.target
EOF

     systemctl daemon-reload
     systemctl start tomcat
     systemctl enable tomcat

   SHELL
end
